{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SANTOSH\\\\Desktop\\\\dti\\\\client\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst initialState = {\n  items: [],\n  totalAmount: 0,\n  rentalDays: 1\n};\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const existingItem = state.items.find(item => item.product._id === action.payload.product._id && item.rentalDays === action.payload.rentalDays);\n      if (existingItem) {\n        const updatedItems = state.items.map(item => item.product._id === action.payload.product._id && item.rentalDays === action.payload.rentalDays ? {\n          ...item,\n          quantity: item.quantity + action.payload.quantity\n        } : item);\n        const totalAmount = updatedItems.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n        return {\n          ...state,\n          items: updatedItems,\n          totalAmount\n        };\n      } else {\n        const newItems = [...state.items, action.payload];\n        const totalAmount = newItems.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n        return {\n          ...state,\n          items: newItems,\n          totalAmount\n        };\n      }\n    case 'REMOVE_ITEM':\n      const filteredItems = state.items.filter(item => item.product._id !== action.payload);\n      const newTotalAmount = filteredItems.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n      return {\n        ...state,\n        items: filteredItems,\n        totalAmount: newTotalAmount\n      };\n    case 'UPDATE_QUANTITY':\n      const updatedItems = state.items.map(item => item.product._id === action.payload.productId ? {\n        ...item,\n        quantity: action.payload.quantity\n      } : item);\n      const updatedTotalAmount = updatedItems.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n      return {\n        ...state,\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    case 'UPDATE_RENTAL_DAYS':\n      const itemsWithUpdatedRentalDays = state.items.map(item => ({\n        ...item,\n        rentalDays: action.payload\n      }));\n      const totalAmountWithUpdatedRentalDays = itemsWithUpdatedRentalDays.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n      return {\n        ...state,\n        items: itemsWithUpdatedRentalDays,\n        rentalDays: action.payload,\n        totalAmount: totalAmountWithUpdatedRentalDays\n      };\n    case 'CLEAR_CART':\n      return {\n        ...initialState\n      };\n    case 'LOAD_CART':\n      return {\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n  const [cartLoading, setCartLoading] = useState(false);\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n  const {\n    isAuthenticated,\n    user,\n    loading\n  } = useAuth();\n\n  // Helper to get the correct localStorage key\n  const getCartKey = () => isAuthenticated && user && user._id ? `cart_${user._id}` : 'cart';\n\n  // Load cart from localStorage first, then sync with backend if needed\n  useEffect(() => {\n    if (loading) {\n      console.log('Cart loading: waiting for auth to load');\n      return;\n    }\n    console.log('Cart loading: auth loaded, isAuthenticated:', isAuthenticated, 'user:', user);\n    const loadCart = async () => {\n      setCartLoading(true);\n      try {\n        // Always try localStorage first\n        const cartKey = getCartKey();\n        const savedCart = localStorage.getItem(cartKey);\n        console.log('Checking localStorage with key:', cartKey);\n        if (savedCart) {\n          try {\n            const cartData = JSON.parse(savedCart);\n            console.log('Found localStorage cart:', cartData);\n            if (cartData.items && cartData.items.length > 0) {\n              console.log('Loading cart from localStorage');\n              dispatch({\n                type: 'LOAD_CART',\n                payload: cartData\n              });\n\n              // If authenticated, sync to backend in background\n              if (isAuthenticated && user && user._id) {\n                console.log('Syncing localStorage cart to backend');\n                const cartForBackend = cartData.items.map(item => ({\n                  product: item.product._id,\n                  quantity: item.quantity,\n                  rentalDays: item.rentalDays\n                }));\n                try {\n                  await axios.post('/api/users/cart', {\n                    cart: cartForBackend\n                  });\n                  console.log('Cart synced to backend successfully');\n                } catch (error) {\n                  console.error('Error syncing to backend:', error);\n                }\n              }\n              setIsInitialLoad(false);\n              return;\n            }\n          } catch (error) {\n            console.error('Error parsing localStorage cart:', error);\n          }\n        }\n\n        // If no localStorage cart and user is authenticated, try backend\n        if (isAuthenticated && user && user._id) {\n          console.log('No localStorage cart found, checking backend');\n          try {\n            const res = await axios.get('/api/users/cart');\n            const backendCart = res.data && res.data.cart ? res.data.cart : [];\n            if (backendCart.length > 0) {\n              console.log('Found backend cart:', backendCart);\n              const formattedCart = backendCart.map(item => ({\n                product: item.product,\n                quantity: item.quantity,\n                rentalDays: item.rentalDays\n              }));\n              const totalAmount = formattedCart.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n              const cartData = {\n                items: formattedCart,\n                totalAmount,\n                rentalDays: 1\n              };\n              console.log('Loading cart from backend:', cartData);\n              dispatch({\n                type: 'LOAD_CART',\n                payload: cartData\n              });\n              localStorage.setItem(cartKey, JSON.stringify(cartData));\n            } else {\n              console.log('Backend cart is empty, using initial state');\n              dispatch({\n                type: 'LOAD_CART',\n                payload: {\n                  ...initialState\n                }\n              });\n            }\n          } catch (error) {\n            console.error('Error loading from backend:', error);\n            dispatch({\n              type: 'LOAD_CART',\n              payload: {\n                ...initialState\n              }\n            });\n          }\n        } else {\n          console.log('No localStorage cart found and not authenticated, using initial state');\n          dispatch({\n            type: 'LOAD_CART',\n            payload: {\n              ...initialState\n            }\n          });\n        }\n      } finally {\n        setCartLoading(false);\n        setIsInitialLoad(false);\n      }\n    };\n    loadCart();\n  }, [isAuthenticated, loading, user]);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    if (cartLoading) {\n      console.log('Cart loading, skipping save');\n      return;\n    }\n    console.log('Cart state changed, saving to localStorage:', state);\n    if (state && typeof state === 'object') {\n      const cartKey = getCartKey();\n      console.log('Saving cart to localStorage with key:', cartKey);\n      localStorage.setItem(cartKey, JSON.stringify(state));\n      console.log('Cart saved to localStorage successfully');\n    }\n  }, [state, cartLoading]);\n\n  // Sync cart to backend when it changes (only for authenticated users)\n  useEffect(() => {\n    if (cartLoading || !isAuthenticated || !user || !user._id) {\n      return;\n    }\n    console.log('Syncing cart to backend:', state.items.length, 'items');\n    if (state.items && state.items.length > 0) {\n      const cartForBackend = state.items.map(item => ({\n        product: item.product._id,\n        quantity: item.quantity,\n        rentalDays: item.rentalDays\n      }));\n      console.log('Syncing cart to backend:', cartForBackend);\n      axios.post('/api/users/cart', {\n        cart: cartForBackend\n      }).then(response => {\n        console.log('Cart synced to backend successfully:', response.data);\n      }).catch(error => {\n        console.error('Error syncing cart to backend:', error);\n      });\n    } else {\n      // Don't clear backend cart automatically - only clear when explicitly called\n      console.log('Cart is empty, but not clearing backend cart automatically');\n    }\n  }, [state.items, isAuthenticated, user, cartLoading]);\n\n  // Clear user-specific cart from localStorage on logout\n  useEffect(() => {\n    if (!isAuthenticated && user && user._id) {\n      localStorage.removeItem(`cart_${user._id}`);\n    }\n  }, [isAuthenticated, user]);\n\n  // Add item to cart\n  const addToCart = (product, quantity = 1, rentalDays = 1) => {\n    if (product.availableQuantity < quantity) {\n      toast.error(`Only ${product.availableQuantity} items available`);\n      return false;\n    }\n    const existingItem = state.items.find(item => item.product._id === product._id && item.rentalDays === rentalDays);\n    if (existingItem && existingItem.quantity + quantity > product.availableQuantity) {\n      toast.error(`Cannot add more items. Only ${product.availableQuantity} available`);\n      return false;\n    }\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        product,\n        quantity,\n        rentalDays\n      }\n    });\n    return true;\n  };\n\n  // Remove item from cart\n  const removeFromCart = productId => {\n    dispatch({\n      type: 'REMOVE_ITEM',\n      payload: productId\n    });\n    toast.success('Item removed from cart');\n  };\n\n  // Update item quantity\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    const item = state.items.find(item => item.product._id === productId);\n    if (item && quantity > item.product.availableQuantity) {\n      toast.error(`Only ${item.product.availableQuantity} items available`);\n      return;\n    }\n    dispatch({\n      type: 'UPDATE_QUANTITY',\n      payload: {\n        productId,\n        quantity\n      }\n    });\n  };\n\n  // Update rental days\n  const updateRentalDays = days => {\n    if (days < 1) {\n      toast.error('Rental days must be at least 1');\n      return;\n    }\n    dispatch({\n      type: 'UPDATE_RENTAL_DAYS',\n      payload: days\n    });\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n\n    // Explicitly clear backend cart\n    if (isAuthenticated && user && user._id) {\n      console.log('Explicitly clearing backend cart');\n      axios.post('/api/users/cart', {\n        cart: []\n      }).then(response => {\n        console.log('Backend cart cleared successfully:', response.data);\n      }).catch(error => {\n        console.error('Error clearing backend cart:', error);\n      });\n    }\n    toast.success('Cart cleared');\n  };\n\n  // Get cart item count\n  const getCartItemCount = () => {\n    return state.items.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  // Check if cart is empty\n  const isCartEmpty = () => {\n    return state.items.length === 0;\n  };\n\n  // Get cart items for checkout\n  const getCheckoutItems = () => {\n    return state.items.map(item => ({\n      product: item.product._id,\n      quantity: item.quantity\n    }));\n  };\n  const value = {\n    items: state.items,\n    totalAmount: state.totalAmount,\n    rentalDays: state.rentalDays,\n    cartLoading,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    updateRentalDays,\n    clearCart,\n    getCartItemCount,\n    isCartEmpty,\n    getCheckoutItems\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 10\n  }, this);\n};\n_s(CartProvider, \"a/nLHM7AbYflIpXzFWu7wqsNrOo=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","useAuth","axios","toast","jsxDEV","_jsxDEV","CartContext","initialState","items","totalAmount","rentalDays","cartReducer","state","action","type","existingItem","find","item","product","_id","payload","updatedItems","map","quantity","reduce","total","pricePerDay","newItems","filteredItems","filter","newTotalAmount","productId","updatedTotalAmount","itemsWithUpdatedRentalDays","totalAmountWithUpdatedRentalDays","CartProvider","children","_s","dispatch","cartLoading","setCartLoading","isInitialLoad","setIsInitialLoad","isAuthenticated","user","loading","getCartKey","console","log","loadCart","cartKey","savedCart","localStorage","getItem","cartData","JSON","parse","length","cartForBackend","post","cart","error","res","get","backendCart","data","formattedCart","setItem","stringify","then","response","catch","removeItem","addToCart","availableQuantity","removeFromCart","success","updateQuantity","updateRentalDays","days","clearCart","getCartItemCount","isCartEmpty","getCheckoutItems","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/SANTOSH/Desktop/dti/client/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst CartContext = createContext();\n\nconst initialState = {\n  items: [],\n  totalAmount: 0,\n  rentalDays: 1,\n};\n\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const existingItem = state.items.find(\n        item => item.product._id === action.payload.product._id && item.rentalDays === action.payload.rentalDays\n      );\n      \n      if (existingItem) {\n        const updatedItems = state.items.map(item =>\n          item.product._id === action.payload.product._id && item.rentalDays === action.payload.rentalDays\n            ? { ...item, quantity: item.quantity + action.payload.quantity }\n            : item\n        );\n        const totalAmount = updatedItems.reduce(\n          (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n          0\n        );\n        return { ...state, items: updatedItems, totalAmount };\n      } else {\n        const newItems = [...state.items, action.payload];\n        const totalAmount = newItems.reduce(\n          (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n          0\n        );\n        return { ...state, items: newItems, totalAmount };\n      }\n\n    case 'REMOVE_ITEM':\n      const filteredItems = state.items.filter(item => item.product._id !== action.payload);\n      const newTotalAmount = filteredItems.reduce(\n        (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n        0\n      );\n      return { ...state, items: filteredItems, totalAmount: newTotalAmount };\n\n    case 'UPDATE_QUANTITY':\n      const updatedItems = state.items.map(item =>\n        item.product._id === action.payload.productId\n          ? { ...item, quantity: action.payload.quantity }\n          : item\n      );\n      const updatedTotalAmount = updatedItems.reduce(\n        (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n        0\n      );\n      return { ...state, items: updatedItems, totalAmount: updatedTotalAmount };\n\n    case 'UPDATE_RENTAL_DAYS':\n      const itemsWithUpdatedRentalDays = state.items.map(item => ({\n        ...item,\n        rentalDays: action.payload\n      }));\n      const totalAmountWithUpdatedRentalDays = itemsWithUpdatedRentalDays.reduce(\n        (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n        0\n      );\n      return {\n        ...state,\n        items: itemsWithUpdatedRentalDays,\n        rentalDays: action.payload,\n        totalAmount: totalAmountWithUpdatedRentalDays\n      };\n\n    case 'CLEAR_CART':\n      return { ...initialState };\n\n    case 'LOAD_CART':\n      return { ...action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const CartProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n  const [cartLoading, setCartLoading] = useState(false);\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n  const { isAuthenticated, user, loading } = useAuth();\n\n  // Helper to get the correct localStorage key\n  const getCartKey = () => (isAuthenticated && user && user._id ? `cart_${user._id}` : 'cart');\n\n  // Load cart from localStorage first, then sync with backend if needed\n  useEffect(() => {\n    if (loading) {\n      console.log('Cart loading: waiting for auth to load');\n      return;\n    }\n\n    console.log('Cart loading: auth loaded, isAuthenticated:', isAuthenticated, 'user:', user);\n\n    const loadCart = async () => {\n      setCartLoading(true);\n      \n      try {\n        // Always try localStorage first\n        const cartKey = getCartKey();\n        const savedCart = localStorage.getItem(cartKey);\n        console.log('Checking localStorage with key:', cartKey);\n\n        if (savedCart) {\n          try {\n            const cartData = JSON.parse(savedCart);\n            console.log('Found localStorage cart:', cartData);\n            \n            if (cartData.items && cartData.items.length > 0) {\n              console.log('Loading cart from localStorage');\n              dispatch({ type: 'LOAD_CART', payload: cartData });\n              \n              // If authenticated, sync to backend in background\n              if (isAuthenticated && user && user._id) {\n                console.log('Syncing localStorage cart to backend');\n                const cartForBackend = cartData.items.map(item => ({\n                  product: item.product._id,\n                  quantity: item.quantity,\n                  rentalDays: item.rentalDays\n                }));\n                \n                try {\n                  await axios.post('/api/users/cart', { cart: cartForBackend });\n                  console.log('Cart synced to backend successfully');\n                } catch (error) {\n                  console.error('Error syncing to backend:', error);\n                }\n              }\n              setIsInitialLoad(false);\n              return;\n            }\n          } catch (error) {\n            console.error('Error parsing localStorage cart:', error);\n          }\n        }\n\n        // If no localStorage cart and user is authenticated, try backend\n        if (isAuthenticated && user && user._id) {\n          console.log('No localStorage cart found, checking backend');\n          try {\n            const res = await axios.get('/api/users/cart');\n            const backendCart = res.data && res.data.cart ? res.data.cart : [];\n            \n            if (backendCart.length > 0) {\n              console.log('Found backend cart:', backendCart);\n              const formattedCart = backendCart.map(item => ({\n                product: item.product,\n                quantity: item.quantity,\n                rentalDays: item.rentalDays\n              }));\n              const totalAmount = formattedCart.reduce(\n                (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n                0\n              );\n              const cartData = { items: formattedCart, totalAmount, rentalDays: 1 };\n              console.log('Loading cart from backend:', cartData);\n              dispatch({ type: 'LOAD_CART', payload: cartData });\n              localStorage.setItem(cartKey, JSON.stringify(cartData));\n            } else {\n              console.log('Backend cart is empty, using initial state');\n              dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n            }\n          } catch (error) {\n            console.error('Error loading from backend:', error);\n            dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n          }\n        } else {\n          console.log('No localStorage cart found and not authenticated, using initial state');\n          dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n        }\n      } finally {\n        setCartLoading(false);\n        setIsInitialLoad(false);\n      }\n    };\n\n    loadCart();\n  }, [isAuthenticated, loading, user]);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    if (cartLoading) {\n      console.log('Cart loading, skipping save');\n      return;\n    }\n\n    console.log('Cart state changed, saving to localStorage:', state);\n    \n    if (state && typeof state === 'object') {\n      const cartKey = getCartKey();\n      console.log('Saving cart to localStorage with key:', cartKey);\n      localStorage.setItem(cartKey, JSON.stringify(state));\n      console.log('Cart saved to localStorage successfully');\n    }\n  }, [state, cartLoading]);\n\n  // Sync cart to backend when it changes (only for authenticated users)\n  useEffect(() => {\n    if (cartLoading || !isAuthenticated || !user || !user._id) {\n      return;\n    }\n\n    console.log('Syncing cart to backend:', state.items.length, 'items');\n    \n    if (state.items && state.items.length > 0) {\n      const cartForBackend = state.items.map(item => ({\n        product: item.product._id,\n        quantity: item.quantity,\n        rentalDays: item.rentalDays\n      }));\n      \n      console.log('Syncing cart to backend:', cartForBackend);\n      axios.post('/api/users/cart', { cart: cartForBackend })\n        .then((response) => {\n          console.log('Cart synced to backend successfully:', response.data);\n        })\n        .catch((error) => {\n          console.error('Error syncing cart to backend:', error);\n        });\n    } else {\n      // Don't clear backend cart automatically - only clear when explicitly called\n      console.log('Cart is empty, but not clearing backend cart automatically');\n    }\n  }, [state.items, isAuthenticated, user, cartLoading]);\n\n  // Clear user-specific cart from localStorage on logout\n  useEffect(() => {\n    if (!isAuthenticated && user && user._id) {\n      localStorage.removeItem(`cart_${user._id}`);\n    }\n  }, [isAuthenticated, user]);\n\n  // Add item to cart\n  const addToCart = (product, quantity = 1, rentalDays = 1) => {\n    if (product.availableQuantity < quantity) {\n      toast.error(`Only ${product.availableQuantity} items available`);\n      return false;\n    }\n    \n    const existingItem = state.items.find(item => item.product._id === product._id && item.rentalDays === rentalDays);\n    if (existingItem && existingItem.quantity + quantity > product.availableQuantity) {\n      toast.error(`Cannot add more items. Only ${product.availableQuantity} available`);\n      return false;\n    }\n    \n    dispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        product,\n        quantity,\n        rentalDays,\n      },\n    });\n    return true;\n  };\n\n  // Remove item from cart\n  const removeFromCart = (productId) => {\n    dispatch({\n      type: 'REMOVE_ITEM',\n      payload: productId,\n    });\n    toast.success('Item removed from cart');\n  };\n\n  // Update item quantity\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    const item = state.items.find(item => item.product._id === productId);\n    if (item && quantity > item.product.availableQuantity) {\n      toast.error(`Only ${item.product.availableQuantity} items available`);\n      return;\n    }\n    dispatch({\n      type: 'UPDATE_QUANTITY',\n      payload: {\n        productId,\n        quantity,\n      },\n    });\n  };\n\n  // Update rental days\n  const updateRentalDays = (days) => {\n    if (days < 1) {\n      toast.error('Rental days must be at least 1');\n      return;\n    }\n    dispatch({\n      type: 'UPDATE_RENTAL_DAYS',\n      payload: days,\n    });\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    dispatch({ type: 'CLEAR_CART' });\n    \n    // Explicitly clear backend cart\n    if (isAuthenticated && user && user._id) {\n      console.log('Explicitly clearing backend cart');\n      axios.post('/api/users/cart', { cart: [] })\n        .then((response) => {\n          console.log('Backend cart cleared successfully:', response.data);\n        })\n        .catch((error) => {\n          console.error('Error clearing backend cart:', error);\n        });\n    }\n    \n    toast.success('Cart cleared');\n  };\n\n  // Get cart item count\n  const getCartItemCount = () => {\n    return state.items.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  // Check if cart is empty\n  const isCartEmpty = () => {\n    return state.items.length === 0;\n  };\n\n  // Get cart items for checkout\n  const getCheckoutItems = () => {\n    return state.items.map(item => ({\n      product: item.product._id,\n      quantity: item.quantity,\n    }));\n  };\n\n  const value = {\n    items: state.items,\n    totalAmount: state.totalAmount,\n    rentalDays: state.rentalDays,\n    cartLoading,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    updateRentalDays,\n    clearCart,\n    getCartItemCount,\n    isCartEmpty,\n    getCheckoutItems,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}