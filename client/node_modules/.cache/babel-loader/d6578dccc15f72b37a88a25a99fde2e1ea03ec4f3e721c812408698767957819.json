{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SANTOSH\\\\Desktop\\\\dti\\\\client\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst initialState = {\n  items: [],\n  totalAmount: 0,\n  rentalDays: 1\n};\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const existingItem = state.items.find(item => item.product._id === action.payload.product._id && item.rentalDays === action.payload.rentalDays);\n      if (existingItem) {\n        const updatedItems = state.items.map(item => item.product._id === action.payload.product._id && item.rentalDays === action.payload.rentalDays ? {\n          ...item,\n          quantity: item.quantity + action.payload.quantity\n        } : item);\n        const totalAmount = updatedItems.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n        return {\n          ...state,\n          items: updatedItems,\n          totalAmount\n        };\n      } else {\n        const newItems = [...state.items, action.payload];\n        const totalAmount = newItems.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n        return {\n          ...state,\n          items: newItems,\n          totalAmount\n        };\n      }\n    case 'REMOVE_ITEM':\n      const filteredItems = state.items.filter(item => item.product._id !== action.payload);\n      const newTotalAmount = filteredItems.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n      return {\n        ...state,\n        items: filteredItems,\n        totalAmount: newTotalAmount\n      };\n    case 'UPDATE_QUANTITY':\n      const updatedItems = state.items.map(item => item.product._id === action.payload.productId ? {\n        ...item,\n        quantity: action.payload.quantity\n      } : item);\n      const updatedTotalAmount = updatedItems.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n      return {\n        ...state,\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    case 'UPDATE_RENTAL_DAYS':\n      const recalculatedTotalAmount = state.items.reduce((total, item) => total + item.product.pricePerDay * item.quantity * action.payload, 0);\n      return {\n        ...state,\n        rentalDays: action.payload,\n        totalAmount: recalculatedTotalAmount\n      };\n    case 'CLEAR_CART':\n      return {\n        ...state,\n        items: [],\n        totalAmount: 0\n      };\n    case 'LOAD_CART':\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n  const [cartLoading, setCartLoading] = useState(true);\n  const [cartLoaded, setCartLoaded] = useState(false);\n  const {\n    user,\n    isAuthenticated,\n    loading\n  } = useAuth();\n\n  // Helper to get the correct localStorage key\n  const getCartKey = () => isAuthenticated && user && user._id ? `cart_${user._id}` : 'cart';\n\n  // Load cart from backend for logged-in users, or from localStorage for guests\n  useEffect(() => {\n    if (loading) {\n      console.log('Cart loading: waiting for auth to load');\n      return;\n    }\n\n    // Prevent multiple loads\n    if (cartLoaded) {\n      console.log('Cart already loaded, skipping');\n      return;\n    }\n    console.log('Cart loading: auth loaded, isAuthenticated:', isAuthenticated, 'user:', user);\n\n    // Add a small delay to ensure authentication is fully processed\n    const timer = setTimeout(() => {\n      const fetchAndSetCart = async () => {\n        setCartLoading(true);\n        try {\n          if (isAuthenticated && user && user._id) {\n            console.log('Loading cart for authenticated user:', user._id);\n\n            // Always check localStorage first\n            const savedCart = localStorage.getItem(getCartKey());\n            console.log('LocalStorage cart key:', getCartKey(), 'savedCart:', savedCart);\n            if (savedCart) {\n              try {\n                const cartData = JSON.parse(savedCart);\n                console.log('Parsed localStorage cart:', cartData);\n                if (cartData.items && cartData.items.length > 0) {\n                  console.log('Found local cart data, loading it:', cartData);\n                  dispatch({\n                    type: 'LOAD_CART',\n                    payload: cartData\n                  });\n\n                  // Sync to backend in background\n                  try {\n                    await axios.post('/api/users/cart', {\n                      cart: cartData.items.map(item => ({\n                        product: typeof item.product === 'object' ? item.product._id : item.product,\n                        quantity: item.quantity,\n                        rentalDays: item.rentalDays\n                      }))\n                    });\n                    console.log('Local cart synced to backend successfully');\n                  } catch (error) {\n                    console.error('Error syncing local cart to backend:', error);\n                  }\n                } else {\n                  console.log('Local cart is empty, checking backend');\n                  // Check backend if local cart is empty\n                  try {\n                    const res = await axios.get('/api/users/cart');\n                    const backendCart = res.data && res.data.cart ? res.data.cart : [];\n                    if (backendCart.length > 0) {\n                      const formattedCart = backendCart.map(item => ({\n                        product: item.product,\n                        quantity: item.quantity,\n                        rentalDays: item.rentalDays\n                      }));\n                      const totalAmount = formattedCart.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n                      const cartData = {\n                        items: formattedCart,\n                        totalAmount,\n                        rentalDays: 1\n                      };\n                      console.log('Loading cart from backend:', cartData);\n                      dispatch({\n                        type: 'LOAD_CART',\n                        payload: cartData\n                      });\n                      localStorage.setItem(getCartKey(), JSON.stringify(cartData));\n                    } else {\n                      console.log('Backend cart is also empty, loading initial state');\n                      dispatch({\n                        type: 'LOAD_CART',\n                        payload: {\n                          ...initialState\n                        }\n                      });\n                    }\n                  } catch (error) {\n                    console.error('Error loading from backend:', error);\n                    dispatch({\n                      type: 'LOAD_CART',\n                      payload: {\n                        ...initialState\n                      }\n                    });\n                  }\n                }\n              } catch (error) {\n                console.error('Error loading cart from localStorage:', error);\n                dispatch({\n                  type: 'LOAD_CART',\n                  payload: {\n                    ...initialState\n                  }\n                });\n              }\n            } else {\n              console.log('No localStorage cart found, checking backend');\n              // Check backend if no local cart\n              try {\n                const res = await axios.get('/api/users/cart');\n                const backendCart = res.data && res.data.cart ? res.data.cart : [];\n                if (backendCart.length > 0) {\n                  const formattedCart = backendCart.map(item => ({\n                    product: item.product,\n                    quantity: item.quantity,\n                    rentalDays: item.rentalDays\n                  }));\n                  const totalAmount = formattedCart.reduce((total, item) => total + item.product.pricePerDay * item.quantity * item.rentalDays, 0);\n                  const cartData = {\n                    items: formattedCart,\n                    totalAmount,\n                    rentalDays: 1\n                  };\n                  console.log('Loading cart from backend:', cartData);\n                  dispatch({\n                    type: 'LOAD_CART',\n                    payload: cartData\n                  });\n                  localStorage.setItem(getCartKey(), JSON.stringify(cartData));\n                } else {\n                  console.log('Backend cart is empty, loading initial state');\n                  dispatch({\n                    type: 'LOAD_CART',\n                    payload: {\n                      ...initialState\n                    }\n                  });\n                }\n              } catch (error) {\n                console.error('Error loading from backend:', error);\n                dispatch({\n                  type: 'LOAD_CART',\n                  payload: {\n                    ...initialState\n                  }\n                });\n              }\n            }\n          } else if (!isAuthenticated) {\n            console.log('Loading cart for guest user');\n            // Guest: load from localStorage\n            const savedCart = localStorage.getItem('cart');\n            if (savedCart) {\n              try {\n                const cartData = JSON.parse(savedCart);\n                console.log('Loading guest cart from localStorage:', cartData);\n                dispatch({\n                  type: 'LOAD_CART',\n                  payload: cartData\n                });\n              } catch (error) {\n                console.error('Error loading cart from localStorage:', error);\n                dispatch({\n                  type: 'LOAD_CART',\n                  payload: {\n                    ...initialState\n                  }\n                });\n              }\n            } else {\n              console.log('No guest cart found, loading initial state');\n              dispatch({\n                type: 'LOAD_CART',\n                payload: {\n                  ...initialState\n                }\n              });\n            }\n          } else {\n            console.log('User not loaded yet, waiting...');\n          }\n        } finally {\n          setCartLoading(false);\n          setCartLoaded(true);\n        }\n      };\n      fetchAndSetCart();\n    }, 500); // Increased delay to ensure auth is processed\n\n    return () => clearTimeout(timer);\n  }, [isAuthenticated, loading, user, getCartKey, cartLoaded]);\n\n  // Save cart to backend and to the correct localStorage key whenever it changes\n  useEffect(() => {\n    // Don't save during initial cart loading\n    if (cartLoading) {\n      console.log('Cart loading, skipping save');\n      return;\n    }\n    console.log('Cart state changed, saving to localStorage and backend:', state);\n    console.log('Cart items count:', state.items ? state.items.length : 0);\n\n    // Only save if we have a valid state\n    if (state && typeof state === 'object') {\n      const cartKey = getCartKey();\n      console.log('Saving cart to localStorage with key:', cartKey);\n      localStorage.setItem(cartKey, JSON.stringify(state));\n      console.log('Cart saved to localStorage successfully');\n\n      // Only sync to backend if we have items and user is authenticated\n      // Don't clear cart on backend during initial load\n      if (isAuthenticated && state.items && state.items.length > 0) {\n        const cartForBackend = state.items.filter(item => item.product && (typeof item.product === 'string' || typeof item.product === 'object' && item.product._id)).map(item => ({\n          product: typeof item.product === 'object' ? item.product._id : item.product,\n          quantity: item.quantity,\n          rentalDays: item.rentalDays\n        }));\n        if (cartForBackend.length > 0) {\n          console.log('Syncing cart to backend:', cartForBackend);\n          axios.post('/api/users/cart', {\n            cart: cartForBackend\n          }).then(response => {\n            console.log('Cart synced successfully:', response.data);\n          }).catch(error => {\n            console.error('Error syncing cart to backend:', error);\n          });\n        }\n      } else {\n        console.log('Not syncing to backend - authenticated:', isAuthenticated, 'items count:', state.items ? state.items.length : 0);\n      }\n      // Remove the automatic clearing logic - only clear when explicitly called\n    }\n  }, [state, isAuthenticated, user, cartLoading]);\n\n  // On logout, clear user-specific cart from localStorage\n  useEffect(() => {\n    if (!isAuthenticated && user && user._id) {\n      localStorage.removeItem(`cart_${user._id}`);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated, user]);\n\n  // Helper to sync cart to backend\n  const syncCartToBackend = items => {\n    if (isAuthenticated && items.length > 0) {\n      const cartForBackend = items.filter(item => item.product && (typeof item.product === 'string' || typeof item.product === 'object' && item.product._id)).map(item => ({\n        product: typeof item.product === 'object' ? item.product._id : item.product,\n        quantity: item.quantity,\n        rentalDays: item.rentalDays\n      }));\n      if (cartForBackend.length > 0) {\n        console.log('Syncing cart to backend (helper):', cartForBackend);\n        axios.post('/api/users/cart', {\n          cart: cartForBackend\n        }).then(response => {\n          console.log('Cart synced successfully (helper):', response.data);\n        }).catch(error => {\n          console.error('Error syncing cart to backend (helper):', error);\n        });\n      }\n    }\n    // Remove automatic clearing - only clear when explicitly called\n  };\n\n  // Add item to cart\n  const addToCart = (product, quantity = 1, rentalDays = 1) => {\n    if (product.availableQuantity < quantity) {\n      toast.error(`Only ${product.availableQuantity} items available`);\n      return false;\n    }\n    // Check if item already exists in cart (same product and rentalDays)\n    const existingItem = state.items.find(item => item.product._id === product._id && item.rentalDays === rentalDays);\n    if (existingItem && existingItem.quantity + quantity > product.availableQuantity) {\n      toast.error(`Cannot add more items. Only ${product.availableQuantity} available`);\n      return false;\n    }\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        product,\n        quantity,\n        rentalDays\n      }\n    });\n    // Sync to backend after add\n    syncCartToBackend([...state.items, {\n      product,\n      quantity,\n      rentalDays\n    }]);\n    return true;\n  };\n\n  // Remove item from cart\n  const removeFromCart = productId => {\n    const newItems = state.items.filter(item => item.product._id !== productId);\n    dispatch({\n      type: 'REMOVE_ITEM',\n      payload: productId\n    });\n    // Sync to backend after remove\n    syncCartToBackend(newItems);\n    toast.success('Item removed from cart');\n  };\n\n  // Update item quantity\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    const item = state.items.find(item => item.product._id === productId);\n    if (item && quantity > item.product.availableQuantity) {\n      toast.error(`Only ${item.product.availableQuantity} items available`);\n      return;\n    }\n    const newItems = state.items.map(item => item.product._id === productId ? {\n      ...item,\n      quantity\n    } : item);\n    dispatch({\n      type: 'UPDATE_QUANTITY',\n      payload: {\n        productId,\n        quantity\n      }\n    });\n    // Sync to backend after update\n    syncCartToBackend(newItems);\n  };\n\n  // Update rental days\n  const updateRentalDays = days => {\n    if (days < 1) {\n      toast.error('Rental days must be at least 1');\n      return;\n    }\n    const newItems = state.items.map(item => ({\n      ...item,\n      rentalDays: days\n    }));\n    dispatch({\n      type: 'UPDATE_RENTAL_DAYS',\n      payload: days\n    });\n    // Sync to backend after update\n    syncCartToBackend(newItems);\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n    // Explicitly clear cart on backend\n    if (isAuthenticated) {\n      console.log('Explicitly clearing cart on backend');\n      axios.post('/api/users/cart', {\n        cart: []\n      }).then(response => {\n        console.log('Cart cleared successfully:', response.data);\n      }).catch(error => {\n        console.error('Error clearing cart on backend:', error);\n      });\n    }\n    toast.success('Cart cleared');\n  };\n\n  // Get cart item count\n  const getCartItemCount = () => {\n    return state.items.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  // Check if cart is empty\n  const isCartEmpty = () => {\n    return state.items.length === 0;\n  };\n\n  // Get cart items for checkout\n  const getCheckoutItems = () => {\n    return state.items.map(item => ({\n      product: item.product._id,\n      quantity: item.quantity\n    }));\n  };\n  const value = {\n    items: state.items,\n    totalAmount: state.totalAmount,\n    rentalDays: state.rentalDays,\n    cartLoading,\n    cartLoaded,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    updateRentalDays,\n    clearCart,\n    getCartItemCount,\n    isCartEmpty,\n    getCheckoutItems\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 10\n  }, this);\n};\n_s(CartProvider, \"RIlimT6NEVTHR3C1vsvJ5uqMwE8=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","toast","axios","useAuth","jsxDEV","_jsxDEV","CartContext","initialState","items","totalAmount","rentalDays","cartReducer","state","action","type","existingItem","find","item","product","_id","payload","updatedItems","map","quantity","reduce","total","pricePerDay","newItems","filteredItems","filter","newTotalAmount","productId","updatedTotalAmount","recalculatedTotalAmount","CartProvider","children","_s","dispatch","cartLoading","setCartLoading","cartLoaded","setCartLoaded","user","isAuthenticated","loading","getCartKey","console","log","timer","setTimeout","fetchAndSetCart","savedCart","localStorage","getItem","cartData","JSON","parse","length","post","cart","error","res","get","backendCart","data","formattedCart","setItem","stringify","clearTimeout","cartKey","cartForBackend","then","response","catch","removeItem","syncCartToBackend","addToCart","availableQuantity","removeFromCart","success","updateQuantity","updateRentalDays","days","clearCart","getCartItemCount","isCartEmpty","getCheckoutItems","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/SANTOSH/Desktop/dti/client/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\n\nconst CartContext = createContext();\n\nconst initialState = {\n  items: [],\n  totalAmount: 0,\n  rentalDays: 1,\n};\n\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const existingItem = state.items.find(item => item.product._id === action.payload.product._id && item.rentalDays === action.payload.rentalDays);\n      \n      if (existingItem) {\n        const updatedItems = state.items.map(item =>\n          item.product._id === action.payload.product._id && item.rentalDays === action.payload.rentalDays\n            ? { ...item, quantity: item.quantity + action.payload.quantity }\n            : item\n        );\n        \n        const totalAmount = updatedItems.reduce(\n          (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n          0\n        );\n        \n        return {\n          ...state,\n          items: updatedItems,\n          totalAmount,\n        };\n      } else {\n        const newItems = [...state.items, action.payload];\n        const totalAmount = newItems.reduce(\n          (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n          0\n        );\n        \n        return {\n          ...state,\n          items: newItems,\n          totalAmount,\n        };\n      }\n\n    case 'REMOVE_ITEM':\n      const filteredItems = state.items.filter(item => item.product._id !== action.payload);\n      const newTotalAmount = filteredItems.reduce(\n        (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n        0\n      );\n      \n      return {\n        ...state,\n        items: filteredItems,\n        totalAmount: newTotalAmount,\n      };\n\n    case 'UPDATE_QUANTITY':\n      const updatedItems = state.items.map(item =>\n        item.product._id === action.payload.productId\n          ? { ...item, quantity: action.payload.quantity }\n          : item\n      );\n      \n      const updatedTotalAmount = updatedItems.reduce(\n        (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n        0\n      );\n      \n      return {\n        ...state,\n        items: updatedItems,\n        totalAmount: updatedTotalAmount,\n      };\n\n    case 'UPDATE_RENTAL_DAYS':\n      const recalculatedTotalAmount = state.items.reduce(\n        (total, item) => total + (item.product.pricePerDay * item.quantity * action.payload),\n        0\n      );\n      \n      return {\n        ...state,\n        rentalDays: action.payload,\n        totalAmount: recalculatedTotalAmount,\n      };\n\n    case 'CLEAR_CART':\n      return {\n        ...state,\n        items: [],\n        totalAmount: 0,\n      };\n\n    case 'LOAD_CART':\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const CartProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n  const [cartLoading, setCartLoading] = useState(true);\n  const [cartLoaded, setCartLoaded] = useState(false);\n  const { user, isAuthenticated, loading } = useAuth();\n\n  // Helper to get the correct localStorage key\n  const getCartKey = () => (isAuthenticated && user && user._id ? `cart_${user._id}` : 'cart');\n\n  // Load cart from backend for logged-in users, or from localStorage for guests\n  useEffect(() => {\n    if (loading) {\n      console.log('Cart loading: waiting for auth to load');\n      return;\n    }\n    \n    // Prevent multiple loads\n    if (cartLoaded) {\n      console.log('Cart already loaded, skipping');\n      return;\n    }\n    \n    console.log('Cart loading: auth loaded, isAuthenticated:', isAuthenticated, 'user:', user);\n    \n    // Add a small delay to ensure authentication is fully processed\n    const timer = setTimeout(() => {\n      const fetchAndSetCart = async () => {\n        setCartLoading(true);\n        try {\n          if (isAuthenticated && user && user._id) {\n            console.log('Loading cart for authenticated user:', user._id);\n            \n            // Always check localStorage first\n            const savedCart = localStorage.getItem(getCartKey());\n            console.log('LocalStorage cart key:', getCartKey(), 'savedCart:', savedCart);\n            \n            if (savedCart) {\n              try {\n                const cartData = JSON.parse(savedCart);\n                console.log('Parsed localStorage cart:', cartData);\n                if (cartData.items && cartData.items.length > 0) {\n                  console.log('Found local cart data, loading it:', cartData);\n                  dispatch({ type: 'LOAD_CART', payload: cartData });\n                  \n                  // Sync to backend in background\n                  try {\n                    await axios.post('/api/users/cart', {\n                      cart: cartData.items.map(item => ({\n                        product: typeof item.product === 'object' ? item.product._id : item.product,\n                        quantity: item.quantity,\n                        rentalDays: item.rentalDays\n                      }))\n                    });\n                    console.log('Local cart synced to backend successfully');\n                  } catch (error) {\n                    console.error('Error syncing local cart to backend:', error);\n                  }\n                } else {\n                  console.log('Local cart is empty, checking backend');\n                  // Check backend if local cart is empty\n                  try {\n                    const res = await axios.get('/api/users/cart');\n                    const backendCart = res.data && res.data.cart ? res.data.cart : [];\n                    if (backendCart.length > 0) {\n                      const formattedCart = backendCart.map(item => ({\n                        product: item.product,\n                        quantity: item.quantity,\n                        rentalDays: item.rentalDays\n                      }));\n                      const totalAmount = formattedCart.reduce(\n                        (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n                        0\n                      );\n                      const cartData = { items: formattedCart, totalAmount, rentalDays: 1 };\n                      console.log('Loading cart from backend:', cartData);\n                      dispatch({ type: 'LOAD_CART', payload: cartData });\n                      localStorage.setItem(getCartKey(), JSON.stringify(cartData));\n                    } else {\n                      console.log('Backend cart is also empty, loading initial state');\n                      dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n                    }\n                  } catch (error) {\n                    console.error('Error loading from backend:', error);\n                    dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n                  }\n                }\n              } catch (error) {\n                console.error('Error loading cart from localStorage:', error);\n                dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n              }\n            } else {\n              console.log('No localStorage cart found, checking backend');\n              // Check backend if no local cart\n              try {\n                const res = await axios.get('/api/users/cart');\n                const backendCart = res.data && res.data.cart ? res.data.cart : [];\n                if (backendCart.length > 0) {\n                  const formattedCart = backendCart.map(item => ({\n                    product: item.product,\n                    quantity: item.quantity,\n                    rentalDays: item.rentalDays\n                  }));\n                  const totalAmount = formattedCart.reduce(\n                    (total, item) => total + (item.product.pricePerDay * item.quantity * item.rentalDays),\n                    0\n                  );\n                  const cartData = { items: formattedCart, totalAmount, rentalDays: 1 };\n                  console.log('Loading cart from backend:', cartData);\n                  dispatch({ type: 'LOAD_CART', payload: cartData });\n                  localStorage.setItem(getCartKey(), JSON.stringify(cartData));\n                } else {\n                  console.log('Backend cart is empty, loading initial state');\n                  dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n                }\n              } catch (error) {\n                console.error('Error loading from backend:', error);\n                dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n              }\n            }\n          } else if (!isAuthenticated) {\n            console.log('Loading cart for guest user');\n            // Guest: load from localStorage\n            const savedCart = localStorage.getItem('cart');\n            if (savedCart) {\n              try {\n                const cartData = JSON.parse(savedCart);\n                console.log('Loading guest cart from localStorage:', cartData);\n                dispatch({ type: 'LOAD_CART', payload: cartData });\n              } catch (error) {\n                console.error('Error loading cart from localStorage:', error);\n                dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n              }\n            } else {\n              console.log('No guest cart found, loading initial state');\n              dispatch({ type: 'LOAD_CART', payload: { ...initialState } });\n            }\n          } else {\n            console.log('User not loaded yet, waiting...');\n          }\n        } finally {\n          setCartLoading(false);\n          setCartLoaded(true);\n        }\n      };\n      fetchAndSetCart();\n    }, 500); // Increased delay to ensure auth is processed\n    \n    return () => clearTimeout(timer);\n  }, [isAuthenticated, loading, user, getCartKey, cartLoaded]);\n\n  // Save cart to backend and to the correct localStorage key whenever it changes\n  useEffect(() => {\n    // Don't save during initial cart loading\n    if (cartLoading) {\n      console.log('Cart loading, skipping save');\n      return;\n    }\n    \n    console.log('Cart state changed, saving to localStorage and backend:', state);\n    console.log('Cart items count:', state.items ? state.items.length : 0);\n    \n    // Only save if we have a valid state\n    if (state && typeof state === 'object') {\n      const cartKey = getCartKey();\n      console.log('Saving cart to localStorage with key:', cartKey);\n      localStorage.setItem(cartKey, JSON.stringify(state));\n      console.log('Cart saved to localStorage successfully');\n      \n      // Only sync to backend if we have items and user is authenticated\n      // Don't clear cart on backend during initial load\n      if (isAuthenticated && state.items && state.items.length > 0) {\n        const cartForBackend = state.items\n          .filter(item => item.product && (typeof item.product === 'string' || (typeof item.product === 'object' && item.product._id)))\n          .map(item => ({\n            product: typeof item.product === 'object' ? item.product._id : item.product,\n            quantity: item.quantity,\n            rentalDays: item.rentalDays\n          }));\n        \n        if (cartForBackend.length > 0) {\n          console.log('Syncing cart to backend:', cartForBackend);\n          axios.post('/api/users/cart', { cart: cartForBackend })\n            .then((response) => {\n              console.log('Cart synced successfully:', response.data);\n            })\n            .catch((error) => {\n              console.error('Error syncing cart to backend:', error);\n            });\n        }\n      } else {\n        console.log('Not syncing to backend - authenticated:', isAuthenticated, 'items count:', state.items ? state.items.length : 0);\n      }\n      // Remove the automatic clearing logic - only clear when explicitly called\n    }\n  }, [state, isAuthenticated, user, cartLoading]);\n\n  // On logout, clear user-specific cart from localStorage\n  useEffect(() => {\n    if (!isAuthenticated && user && user._id) {\n      localStorage.removeItem(`cart_${user._id}`);\n    }\n    // eslint-disable-next-line\n  }, [isAuthenticated, user]);\n\n  // Helper to sync cart to backend\n  const syncCartToBackend = (items) => {\n    if (isAuthenticated && items.length > 0) {\n      const cartForBackend = items\n        .filter(item => item.product && (typeof item.product === 'string' || (typeof item.product === 'object' && item.product._id)))\n        .map(item => ({\n          product: typeof item.product === 'object' ? item.product._id : item.product,\n          quantity: item.quantity,\n          rentalDays: item.rentalDays\n        }));\n      \n      if (cartForBackend.length > 0) {\n        console.log('Syncing cart to backend (helper):', cartForBackend);\n        axios.post('/api/users/cart', { cart: cartForBackend })\n          .then((response) => {\n            console.log('Cart synced successfully (helper):', response.data);\n          })\n          .catch((error) => {\n            console.error('Error syncing cart to backend (helper):', error);\n          });\n      }\n    }\n    // Remove automatic clearing - only clear when explicitly called\n  };\n\n  // Add item to cart\n  const addToCart = (product, quantity = 1, rentalDays = 1) => {\n    if (product.availableQuantity < quantity) {\n      toast.error(`Only ${product.availableQuantity} items available`);\n      return false;\n    }\n    // Check if item already exists in cart (same product and rentalDays)\n    const existingItem = state.items.find(item => item.product._id === product._id && item.rentalDays === rentalDays);\n    if (existingItem && existingItem.quantity + quantity > product.availableQuantity) {\n      toast.error(`Cannot add more items. Only ${product.availableQuantity} available`);\n      return false;\n    }\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        product,\n        quantity,\n        rentalDays,\n      },\n    });\n    // Sync to backend after add\n    syncCartToBackend([\n      ...state.items,\n      { product, quantity, rentalDays }\n    ]);\n    return true;\n  };\n\n  // Remove item from cart\n  const removeFromCart = (productId) => {\n    const newItems = state.items.filter(item => item.product._id !== productId);\n    dispatch({\n      type: 'REMOVE_ITEM',\n      payload: productId,\n    });\n    // Sync to backend after remove\n    syncCartToBackend(newItems);\n    toast.success('Item removed from cart');\n  };\n\n  // Update item quantity\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    const item = state.items.find(item => item.product._id === productId);\n    if (item && quantity > item.product.availableQuantity) {\n      toast.error(`Only ${item.product.availableQuantity} items available`);\n      return;\n    }\n    const newItems = state.items.map(item =>\n      item.product._id === productId\n        ? { ...item, quantity }\n        : item\n    );\n    dispatch({\n      type: 'UPDATE_QUANTITY',\n      payload: {\n        productId,\n        quantity,\n      },\n    });\n    // Sync to backend after update\n    syncCartToBackend(newItems);\n  };\n\n  // Update rental days\n  const updateRentalDays = (days) => {\n    if (days < 1) {\n      toast.error('Rental days must be at least 1');\n      return;\n    }\n    const newItems = state.items.map(item => ({ ...item, rentalDays: days }));\n    dispatch({\n      type: 'UPDATE_RENTAL_DAYS',\n      payload: days,\n    });\n    // Sync to backend after update\n    syncCartToBackend(newItems);\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    dispatch({ type: 'CLEAR_CART' });\n    // Explicitly clear cart on backend\n    if (isAuthenticated) {\n      console.log('Explicitly clearing cart on backend');\n      axios.post('/api/users/cart', { cart: [] })\n        .then((response) => {\n          console.log('Cart cleared successfully:', response.data);\n        })\n        .catch((error) => {\n          console.error('Error clearing cart on backend:', error);\n        });\n    }\n    toast.success('Cart cleared');\n  };\n\n  // Get cart item count\n  const getCartItemCount = () => {\n    return state.items.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  // Check if cart is empty\n  const isCartEmpty = () => {\n    return state.items.length === 0;\n  };\n\n  // Get cart items for checkout\n  const getCheckoutItems = () => {\n    return state.items.map(item => ({\n      product: item.product._id,\n      quantity: item.quantity,\n    }));\n  };\n\n  const value = {\n    items: state.items,\n    totalAmount: state.totalAmount,\n    rentalDays: state.rentalDays,\n    cartLoading,\n    cartLoaded,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    updateRentalDays,\n    clearCart,\n    getCartItemCount,\n    isCartEmpty,\n    getCheckoutItems,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}